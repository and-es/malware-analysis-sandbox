mod args;

use std::fs;
use std::fs::{create_dir_all, File};
use std::io;

use anyhow::Result;
use clap::Parser;
use log::{info, warn};
use sha3::{Digest, Sha3_512};
use uuid::Uuid;

use args::Args;
use malware_analysis_sandbox::analysis_result::AnalysisResultManager;
use malware_analysis_sandbox::sandbox::Sandbox;

#[tokio::main]
async fn main() -> Result<()> {
    env_logger::init();

    let args = Args::parse();

    let mut sample = File::open(&args.path)?;

    info!("Calcurating hash of sample...");
    let mut hasher = Sha3_512::new();
    io::copy(&mut sample, &mut hasher)?;
    let hash = format!("{:x}", hasher.finalize());

    let analysis_result_manager = AnalysisResultManager::init().await?;

    info!("Searching result...");
    let analysis_result = analysis_result_manager.search_hash(&hash).await?;

    let id;
    match analysis_result {
        Some(r) => {
            if !args.re_analyze && !r.execution_logs.is_empty() {
                warn!("The sample was already analyzed");
                warn!("If you want to re-analyze, please run with --re-analyze option");
                return Ok(());
            }
            id = r.id;
        }
        None => {
            id = Uuid::new_v4().to_string();
            analysis_result_manager.make_new_result(&id, &hash).await?;
            create_dir_all(format!("analysis_result/{}/sample", &id))?;
            create_dir_all(format!("analysis_result/{}/artifact", &id))?;
            fs::copy(args.path, format!("analysis_result/{}/sample/sample", &id))?;
        }
    }

    let sandbox = Sandbox::init().await?;
    let execution_log = sandbox
        .exec(&id, &format!("analysis_result/{}/sample/sample", id), 1)
        .await?;

    info!("Recording to mongodb...");
    analysis_result_manager
        .store_execution_log(&id, execution_log)
        .await?;

    Ok(())
}
