mod args;

use std::fs::File;
use std::io;

use anyhow::Result;
use args::{Analyzer, Args};
use clap::Parser;
use log::{error, info};
use sha3::{Digest, Sha3_512};

use malware_analysis_sandbox::analysis_result::AnalysisResultManager;
use malware_analysis_sandbox::analyzer::{behavior_detection, surface_detection};

#[tokio::main]
async fn main() -> Result<()> {
    env_logger::init();

    let args = Args::parse();

    match args.analyzer {
        Analyzer::Surface => {
            info!("Surface analyzer is selected");
            let result = surface_detection::detect(args.path, "rule.yar", 5)?;
            if result {
                println!("The sample is likely malware");
            } else {
                println!("The sample is not malware");
            }
        }
        Analyzer::Behavior => {
            info!("Behavior analyzer is selected");
            let mut sample = File::open(&args.path)?;

            info!("Calcurating hash of sample...");
            let mut hasher = Sha3_512::new();
            io::copy(&mut sample, &mut hasher)?;
            let hash = format!("{:x}", hasher.finalize());

            let analysis_result_manager = AnalysisResultManager::init().await?;

            info!("Searching result...");
            let analysis_result = analysis_result_manager.search_hash(&hash).await?;
            if let None = analysis_result {
                error!("Analysis result does not exist");
                error!("Please execute sample and get log first")
            }

            let ar = analysis_result.unwrap();

            info!("Detecting...");
            let result =
                behavior_detection::detect(&ar.execution_logs.last().unwrap().sysmon_events)?;

            if result.len() > 0 {
                println!("The sample is likely malware");
                println!("The following behaviors are suspicious");
                for r in result {
                    println!("{:#?}", ar.execution_logs.last().unwrap().sysmon_events[r]);
                }
            } else {
                println!("The sample is not malware");
            }
        }
    }

    Ok(())
}
