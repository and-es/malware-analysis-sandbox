use std::collections::HashMap;

use chrono::{DateTime, FixedOffset};
use roxmltree::Document;

type SysmonEventId = u8;

#[derive(Debug)]
pub struct SysmonEvent {
    pub event_id: SysmonEventId,
    pub time_created: DateTime<FixedOffset>,
    pub event_data: HashMap<String, String>,
}

impl SysmonEvent {
    pub fn from_xml(xml: &str) -> Self {
        let mut event_id = None;
        let mut time_created = None;
        let mut event_data = HashMap::new();

        let event = Document::parse(xml).unwrap();
        let system_xml = event
            .root_element()
            .children()
            .filter(|n| n.tag_name().name() == "System")
            .nth(0)
            .unwrap();
        let event_data_xml = event
            .root_element()
            .children()
            .filter(|n| n.tag_name().name() == "EventData")
            .nth(0)
            .unwrap();

        for node in system_xml.children() {
            match node.tag_name().name() {
                "EventID" => event_id = node.text().unwrap().parse::<SysmonEventId>().ok(),
                "TimeCreated" => {
                    time_created =
                        DateTime::parse_from_rfc3339(node.attribute("SystemTime").unwrap()).ok()
                }
                _ => (),
            }
        }

        for node in event_data_xml.children() {
            if node.tag_name().name() == "Data" {
                event_data.insert(
                    node.attribute("Name").unwrap().to_string(),
                    node.text().unwrap().to_string(),
                );
            }
        }

        SysmonEvent {
            event_id: event_id.unwrap(),
            time_created: time_created.unwrap(),
            event_data,
        }
    }
}
