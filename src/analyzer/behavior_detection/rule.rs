use crate::sysmon_event::{SysmonEvent, SysmonEventId};

pub struct Rules {
    rules: Vec<Box<dyn Rule>>,
}

impl Rules {
    pub fn new() -> Self {
        Self { rules: Vec::new() }
    }

    pub fn add<T: Rule + 'static>(&mut self, rule: T) {
        self.rules.push(Box::new(rule));
    }

    pub fn match_all(&self, events: &Vec<SysmonEvent>) -> Vec<SysmonEvent> {
        let mut result = Vec::new();
        for rule in &self.rules {
            result.extend(rule.match_events(events));
        }
        result
    }
}

pub trait Rule {
    fn match_events(&self, events: &Vec<SysmonEvent>) -> Vec<SysmonEvent> {
        let mut result = Vec::new();
        for event in events.clone() {
            if self.is_match(&event) {
                result.push(event);
            }
        }
        result
    }
    fn is_match(&self, event: &SysmonEvent) -> bool;
}

pub struct FileCreate<'a> {
    pub file_name: &'a str,
}

impl Rule for FileCreate<'_> {
    fn is_match(&self, event: &SysmonEvent) -> bool {
        if event.event_id == SysmonEventId::FILE_CREATE {
            if let Some(f) = event.event_data.get("TargetFilename") {
                if f.contains(self.file_name) {
                    return true;
                }
            }
        }
        false
    }
}
