mod rule;

use anyhow::Result;

use crate::sysmon_event::{SysmonEvent, SysmonEventId};
use rule::{Filter, Rules, Sequential, Single};

pub fn detect(events: &Vec<SysmonEvent>) -> Result<Vec<usize>> {
    let mut rules = Rules::new();

    rules.add(Single {
        filter: Filter {
            event_id: SysmonEventId::FILE_CREATE,
            condition: |e| {
                e.event_data
                    .get("TargetFilename")
                    .unwrap()
                    .contains("hello")
            },
        },
    });

    rules.add(Sequential {
        filters: vec![
            Filter {
                event_id: SysmonEventId::NETWORK_CONNECT,
                condition: |_| true,
            },
            Filter {
                event_id: SysmonEventId::PROCESS_TERMINATE,
                condition: |e| e.event_data.get("Image").unwrap().contains("wget"),
            },
            Filter {
                event_id: SysmonEventId::PROCESS_CREATE,
                condition: |e| e.event_data.get("Image").unwrap().contains("chmod"),
            },
        ],
    });

    Ok(rules.match_all(events))
}
